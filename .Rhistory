# Grid Search and Hyperparameter
tempTest = c()
tempTrain = c()
for (i in 1:700) {
rForest = randomForest(myFormula, data = train, importance = TRUE, do.trace = FALSE, ntree = i, mtry = 5, nodesize = (abs(i - 90)))
pred = predict(rForest, test)
pred2 = predict(rForest, train)
print(i)
tempTrain[i] = (sum(pred2 == train$status_group)/nrow(train))
tempTest[i] = (sum(pred == test$status_group)/nrow(test))
print(tempTest[i])
if (tempTest[i] >= 0.82) {
break;
}
}
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 100:500)', type = 'l', col = 'red', xlim = c(99, 501), ylim = c(0.73, 0.83), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(99, 501), ylim = c(0.73, 0.83), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
legend("topright", inset = 0.15, title = "datasets", c("train","test"), fill = c("red","blue"), horiz = FALSE)
lines(tempTrain - tempTest, type = 'l', col = 'cyan')
plot(tempTrain - tempTest, type = 'l', col = 'cyan')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(99, 501), ylim = c(0.73, 0.83), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
lines(tempTrain - tempTest, type = 'l', col = 'cyan')
legend("topright", inset = 0.15, title = "datasets", c("train","test"), fill = c("red","blue"), horiz = FALSE)
plot(tempTrain - tempTest, type = 'l', col = 'cyan', main = 'Difference between train/test accuracy')
plot(tempTrain - tempTest, type = 'l', col = 'cyan', main = 'Difference between train/test accuracy')
plot(tempTrain - tempTest, type = 'l', col = 'cyan', main = 'Difference between train/test accuracy (gSearch 1:500)')
plot(tempTrain - tempTest, type = 'l', col = 'cyan', main = 'Train Test accuracy (gSearch 1:500)')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(99, 501), ylim = c(0.73, 0.83), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
lines(tempTrain - tempTest, type = 'l', col = 'cyan')
legend("topright", inset = 0.15, title = "datasets", c("train","test"), fill = c("red","blue"), horiz = FALSE)
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', ylim = c(0.73, 0.83), ylab = 'Accuracy')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', ylim = c(0.73, 0.83), ylab = 'Accuracy')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', ylim = c(0.73, 0.83), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
lines(tempTrain - tempTest, type = 'l', col = 'cyan')
legend("topright", inset = 0.15, title = "datasets", c("train","test"), fill = c("red","blue"), horiz = FALSE)
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 500), ylim = c(0.74, 0.85), ylab = 'Accuracy')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 500), ylim = c(0.74, 0.86), ylab = 'Accuracy')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 500), ylim = c(0.75, 0.86), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
4
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 500), ylim = c(0.74, 0.86), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
plot(tempTrain - tempTest, type = 'l', col = 'cyan', main = 'Train Test accuracy (gSearch 1:500)', xlim = c(0, 500))
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 500), ylim = c(0.74, 0.86), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
lines(tempTrain - tempTest, type = 'l', col = 'cyan')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 500), ylim = c(0.74, 0.86), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
legend("topright", inset = 0.15, title = "datasets", c("train","test"), fill = c("red","blue"), horiz = FALSE)
plot(tempTrain - tempTest, type = 'l', col = 'cyan', main = 'Train Test accuracy (gSearch 1:500)', xlim = c(0, 500))
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 200), ylim = c(0.74, 0.86), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
legend("topright", inset = 0.15, title = "datasets", c("train","test"), fill = c("red","blue"), horiz = FALSE)
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 250), ylim = c(0.74, 0.86), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
legend("topright", inset = 0.15, title = "datasets", c("train","test"), fill = c("red","blue"), horiz = FALSE)
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 245), ylim = c(0.74, 0.86), ylab = 'Accuracy')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 243), ylim = c(0.74, 0.86), ylab = 'Accuracy')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 240), ylim = c(0.74, 0.86), ylab = 'Accuracy')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 241), ylim = c(0.74, 0.86), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
legend("topright", inset = 0.15, title = "datasets", c("train","test"), fill = c("red","blue"), horiz = FALSE)
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:500)', type = 'l', col = 'red', xlim = c(0, 240.5), ylim = c(0.74, 0.86), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
plot(tempTrain, main = 'Learning Curve - rForest (gSearch 1:250)', type = 'l', col = 'red', xlim = c(0, 240.5), ylim = c(0.74, 0.86), ylab = 'Accuracy')
lines(tempTest, type = 'l', col = 'blue')
legend("topright", inset = 0.15, title = "datasets", c("train","test"), fill = c("red","blue"), horiz = FALSE)
plot(tempTrain[1:250], main = 'Learning Curve - rForest (gSearch 1:250)', type = 'l', col = 'red', xlim = c(0, 240.5), ylim = c(0.74, 0.86), ylab = 'Accuracy')
plot(tempTrain[1:250], main = 'Learning Curve - rForest (gSearch 1:550)', type = 'l', col = 'red', xlim = c(0, 240.5), ylim = c(0.74, 0.86), ylab = 'Accuracy')
plot(tempTrain[1:250], main = 'Learning Curve - rForest (gSearch 1:550)', type = 'l', col = 'red', xlim = c(0, 240.5), ylim = c(0.74, 0.86), ylab = 'Accuracy')
lines(tempTest[1:50], type = 'l', col = 'blue')
lines(tempTest[1:250], type = 'l', col = 'blue')
plot(tempTrain[1:250], main = 'Learning Curve - rForest (gSearch 1:250)', type = 'l', col = 'red', xlim = c(0, 240.5), ylim = c(0.74, 0.86), ylab = 'Accuracy')
lines(tempTest[1:250], type = 'l', col = 'blue')
legend("topright", inset = 0.15, title = "datasets", c("train","test"), fill = c("red","blue"), horiz = FALSE)
## Does removing the installer attributes and the year of construction was a good approach?
mean(tempTrain)                                        # [1] 0.7704291
mean(tempTest)                                         # [2] 0.7526957
max(tempTest)                                          # [1]
max(tempTrain)                                         # [1]
confusionMatrix(table(pred2, test$status_group))
confusionMatrix(table(pred, test$status_group))
confusionMatrix(table(pred, test$status_group))
# ------------------------------------------------------ Testing and Validation Function
# randomForest and RWeka classifiers
predVal = function(model, test) {
predict = predict(model, test)
real = test$status_group
print(sum(predict == real)/nrow(test))
confusionMatrix(table(predict, real))
}
predVal(tempTrain, train)
# ------------------------------------------------------ Testing and Validation Function
# randomForest and RWeka classifiers
predVal = function(model, test) {
predict = model
real = test$status_group
print(sum(predict == real)/nrow(test))
confusionMatrix(table(predict, real))
}
# randomForest - Grid Search
predVal = function(model, test) {
predict = model
real = test$status_group
print(sum(predict == real)/nrow(test))
confusionMatrix(table(predict, real))
}
predVal(tempTrain, train)
predVal(pred2, train)
predVal(pred, test)
library(readr)
trainX = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainX.csv")
trainX$id = NULL
trainY = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainY.csv")
trainY$id = NULL
dataset = cbind(trainX, trainY)
rm(trainX)
rm(trainY)
View(dataset)
dataset[1:3, c(33, 34)]
sum(dataset$quality_group == dataset$quantity)
unique(dataset$quantity)
unique(dataset$quantity_group)
dataset[1:3, c(33, 34)]
dataset[1:3, c(33, 34)]
dataset[1:3, c(33, 34)]
dataset[1:3, c(33, 34)]
dataset[1:3, c(33, 34)]
sum(dataset$amount_tsh == 0)/nrow(dataset)
sum(is.na(dataset$amount_tsh))
library(readr)
trainX = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainX.csv")
trainX$id = NULL
trainY = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainY.csv")
trainY$id = NULL
dataset = cbind(trainX, trainY)
rm(trainX)
rm(trainY)
unique(dataset$quantity))
unique(dataset$quantity)
unique(dataset$quantity_group)
library(readr)
trainX = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainX.csv")
trainX$id = NULL
trainY = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainY.csv")
trainY$id = NULL
dataset = cbind(trainX, trainY)
rm(trainX)
rm(trainY)
sum(dataset$amount_tsh == 0)/nrow(dataset)
sum(is.na(dataset$amount_tsh))
dataset[1:5, c(33, 34)]
library(readr)
trainX = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainX.csv")
trainX$id = NULL
trainY = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainY.csv")
trainY$id = NULL
dataset = cbind(trainX, trainY)
rm(trainX)
rm(trainY)
sum(dataset$amount_tsh == 0)/nrow(dataset)
sum(is.na(dataset$amount_tsh))
library(readr)
trainX = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainX.csv")
trainX$id = NULL
trainY = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainY.csv")
trainY$id = NULL
dataset = cbind(trainX, trainY)
rm(trainX)
rm(trainY)
sum(dataset$amount_tsh == 0)/nrow(dataset)
sum(is.na(dataset$amount_tsh))
dataset[1:5, c(33, 34)]
sum(is.na(dataset$quantity))
sum(is.na(dataset$quantity_group))
dataset$quantity_group = NULL
dataset$quantity_group = NULL
dataset$quantity_group = NULL
sum(is.na(dataset$quantity))
sum(is.na(dataset$quantity_group))
dataset[1:5, c(33, 34)]
library(readr)
trainX = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainX.csv")
trainX$id = NULL
trainY = read_csv("~/Documents/OneDrive/Acadêmico/ESPM/Semestre V/Tel 03.3009 - Machine Learning e Analytics/Trabalhos/taarifaProblem/data/trainY.csv")
trainY$id = NULL
dataset = cbind(trainX, trainY)
rm(trainX)
rm(trainY)
dataset[1:5, c(32, 34)]
dataset[1:5, c(dataset$quantity, dataset$quantity_group)]
dataset[1:5, c('dataset$quantity', 'dataset$quantity_group')]
dataset[1:5, c('quantity', 'quantity_group')]
unique(dataset$quantity)
uniquedataset$quantity_group)
unique(dataset$quantity)
unique(dataset$quantity_group)
sum(dataset$gps_height == 0)
sum(dataset$gps_height == 0)/nrow(dataset)
sum(is.na(dataset$gps_height))
sum(dataset$gps_height == 0)/nrow(dataset)
sum(is.na(dataset$gps_height))
sum(is.na(dataset$basin))
sum(is.na(dataset$district_code))
sum(is.na(dataset$region))
sum(is.na(dataset$region_code))
sum(is.na(dataset$lga))
sum(is.na(dataset$ward))
sum(is.na(dataset$subvillage))
